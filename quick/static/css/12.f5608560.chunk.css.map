{"version":3,"sources":["webpack://src/pages/styles/dragon.scss","webpack://src/styles/_variables.scss","webpack://src/styles/_breakpoints.scss"],"names":[],"mappings":"AAGA,eACE,kBCOS,CDNT,kBAAA,CACA,YAAA,CACA,iBAAA,CACA,eAAA,CEgNA,oCFrNF,eAOI,iBAAA,CAAA,CAIJ,UAEE,iBAAA,CACA,KAAA,CACA,MAAA,CACA,+BCHK,CDIL,gBAAA,CACA,eAAA,CACA,wBAPA,UAQE,CAIJ,YACE,UAAA,CACA,iBAAA,CACA,SAAA,CAGF,aACE,kBAAA,CACA,gBACE,kBAAA,CACA,aC/BS,CDmCb,oBACE,kBAAA,CAIA,2BAAA,CACA,kBAAA,CAGF,mCAPE,YAAA,CACA,kBAAA,CACA,UAYA,CAPF,eACE,eAAA,CAEA,WAAA,CACA,kBAAA,CAEA,sBACA,CAGF,eACE,YAAA,CACA,6BAAA,CACA,eAAA","file":"12.f5608560.chunk.css","sourcesContent":["@use 'styles/variables' as *;\r\n@use 'styles/breakpoints' as *;\r\n\r\n.dragonWrapper {\r\n  background: $bgPalette;\r\n  border-radius: 20px;\r\n  padding: 32px;\r\n  position: relative;\r\n  overflow: hidden;\r\n  @include media(\"screen\", \"<phone\") {\r\n    padding: 24px 16px\r\n  }\r\n}\r\n\r\n.dragonBg {\r\n  width: 100%;\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  background: $grey5;\r\n  max-height: 138px;\r\n  overflow: hidden;\r\n  & img {\r\n    width: 100%;\r\n  }\r\n}\r\n\r\n.dragonMask {\r\n  width: 100%;\r\n  position: absolute;\r\n  top: 207px;\r\n}\r\n\r\n.dragonTitle {\r\n  margin-bottom: 64px;\r\n  & h5 {\r\n    margin-bottom: 16px;\r\n    color: $textPrimary;\r\n  }\r\n}\r\n\r\n.dragonAlertWrapper {\r\n  margin-bottom: 24px;\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n  padding: 16px 24px 16px 12px;\r\n  border-radius: 12px;\r\n}\r\n\r\n.quickTodQuick {\r\n  margin-top: 20px;\r\n  width: 100%;\r\n  height: 40px;\r\n  border-radius: 10px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n.dragonLairRow {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin-top: 12px;\r\n}\r\n","$primary:#448aff;\r\n$primaryDark:#1C2938;\r\n$secondary:#344252;\r\n$secondary1:#252833;\r\n$secondary2:#232734;\r\n$secondary3:#2c3242;\r\n$textPrimary:#c7cad9;\r\n$textSecondary:#696c80;\r\n$textDisabled:#626680;\r\n$textHint:#636780;\r\n$bgColor:#12131a;\r\n$bgPalette:#1b1e29;\r\n$grey1:rgba(99, 103, 128, 0.1);\r\n$grey2:#3e4252;\r\n$grey3:#1b1d26;\r\n$grey4:rgba(68, 138, 255, 0.24);\r\n$grey5:rgba(225, 190, 231, 0.1);\r\n$grey6: #c5cbe0;\r\n$grey7: rgba(255, 255, 255, 0.87);\r\n$grey8: rgb(27, 32, 43, 0.9);\r\n$grey9: rgb(43, 45, 59, 0.2);\r\n$grey10: #1d212c;\r\n$grey11: rgba(40, 145, 249, 0.1);\r\n$grey12: #404557;\r\n$grey13: rgba(0, 0, 0, 0.075);\r\n$grey14: rgba(105, 108, 128, 0.12);\r\n$grey15: rgba(27, 30, 41, 0);\r\n$grey16: rgba(0, 0, 0, 0.01);\r\n$grey17: rgba(0, 0, 0, 0.04);\r\n$grey18: #999;\r\n$grey19: #b6b9cc;\r\n$grey20: #B4C2D5;\r\n$grey21: rgba(0, 0, 0, 0.15);\r\n$grey22: rgba(255, 255, 255, 0.47);\r\n$grey23: rgba(212, 229, 255, 0.8);\r\n$grey24: rgba(15, 198, 121, 0.2);\r\n$grey25: rgb(199, 202, 217);\r\n$grey26: #444444;\r\n$grey27: #2c3142;\r\n$grey28: #2d3447;\r\n$grey29: #ebecf2;\r\n$grey30: #261d12;\r\n$grey31: #32394d;\r\n$grey32: #282d3d;\r\n$successMain:#0fc679;\r\n$successDark:#1DB2D5;\r\n$successLight:rgba(15, 198, 121, 0.1);\r\n$errorMain:#ff5252;\r\n$errorDark:#f00;\r\n$errorLight:rgba(255, 82, 82, 0.1);\r\n$divider:rgba(130, 177, 255, 0.08);\r\n$blue: #3d71ff;\r\n$blue1: #004ce6;\r\n$blue2: #0098ff;\r\n$blue3: #00cff3;\r\n$blue4: #5294FF;\r\n$blue5: #4389fd;\r\n$blue6: rgba(68, 138, 255, 0.3);\r\n$blue7: rgba(68, 138, 255, 0.5);\r\n$blue8: #353c71;\r\n$green1: #64fbd3;\r\n$green2: rgba(15, 198, 121, 0.12);\r\n$green3: #33ce4b;\r\n$yellow1: #e59840;\r\n$yellow2: rgba(255, 160, 0, 0.3);\r\n$yellow3: #ffa000;\r\n$yellow4: #e4c133;\r\n$yellow5: #4b3625;\r\n$yellow6: #ffa726;\r\n$yellow7: rgba(255, 167, 38, 0.3);\r\n$purple1: #3f2d66;\r\n$purple2: #594090;\r\n$black1: #1b1e29;\r\n","$breakpoints: (\r\n  'phone': 600px, \r\n  'tablet': 960px, \r\n  'desktop': 1280px,\r\n) !default;\r\n\r\n$media-expressions: (\r\n  'screen': 'screen', \r\n  'print': 'print', \r\n  'handheld': 'handheld',\r\n  'retina2x': (\r\n    '(-webkit-min-device-pixel-ratio: 2)', \r\n    '(min-resolution: 192dpi)'\r\n  ), \r\n  'retina3x': (\r\n    '(-webkit-min-device-pixel-ratio: 3)', \r\n    '(min-resolution: 350dpi)'\r\n  )\r\n) !default;\r\n\r\n$unit-intervals: (\r\n  'px': 1, \r\n  'em': 0.01, \r\n  'rem': 0.1\r\n) !default;\r\n\r\n@function to-number($string) {\r\n  // Matrices\r\n  $strings: '0' '1' '2' '3' '4' '5' '6' '7' '8' '9';\r\n  $numbers:  0   1   2   3   4   5   6   7   8   9;\r\n  \r\n  // Result\r\n  $result: 0;\r\n  $divider: 0;\r\n  $minus: false;\r\n\r\n  // Looping through all characters\r\n  @for $i from 1 through str-length($string) {\r\n    $character: str-slice($string, $i, $i);\r\n    $index: index($strings, $character);\r\n    \r\n  \r\n    @if $character == '-' {\r\n      $minus: true;\r\n    }\r\n    \r\n    @else if $character == '.' {\r\n      $divider: 1;\r\n    }\r\n    \r\n    @else {\r\n      @if type-of($index) != 'number' {\r\n        $result: if($minus, $result * -1, $result);\r\n        @return _length($result, str-slice($string, $i));\r\n      }\r\n\r\n      $number: nth($numbers, $index);\r\n      \r\n      @if $divider == 0 {\r\n        $result: $result * 10;\r\n      }\r\n      \r\n      @else {\r\n        // Move the decimal dot to the left\r\n        $divider: $divider * 10;\r\n        $number: $number / $divider;\r\n      }\r\n      \r\n      $result: $result + $number;\r\n    }\r\n  }\r\n  \r\n  @return if($minus, $result * -1, $result);\r\n}\r\n\r\n@function _length($number, $unit) {\r\n  $strings: 'px' 'cm' 'mm' '%' 'ch' 'pica' 'in' 'em' 'rem' 'pt' 'pc' 'ex' 'vw' 'vh' 'vmin' 'vmax';\r\n  $units:   1px  1cm  1mm  1%  1ch  1pica  1in  1em  1rem  1pt  1pc  1ex  1vw  1vh  1vmin  1vmax;\r\n  $index: index($strings, $unit);\r\n  \r\n  @if type-of($index) != 'number' {\r\n    @warn 'Unknown unit `#{$unit}`.';\r\n    @return false;\r\n  }\r\n  \r\n  @return $number * nth($units, $index);\r\n}\r\n\r\n@function parse-expression($expression) {\r\n  $operator: '';\r\n  $value: '';\r\n  $element: '';\r\n  $result: '';\r\n  $is-width: true;\r\n\r\n  @if (type-of($expression) != 'string') {\r\n    @warn 'Expression with type `#{type-of($expression)}` detected, string expected.';\r\n  }\r\n\r\n  // Separating the operator from the rest of the expression\r\n  @if (str-slice($expression, 2, 2) == '=') {\r\n    $operator: str-slice($expression, 1, 2);\r\n    $value: str-slice($expression, 3);\r\n  } @else {\r\n    $operator: str-slice($expression, 1, 1);\r\n    $value: str-slice($expression, 2);\r\n  }\r\n\r\n  // Checking what type of expression we're dealing with\r\n  @if map-has-key($breakpoints, $value) {\r\n    $result: map-get($breakpoints, $value);\r\n  } @else if map-has-key($media-expressions, $expression) {\r\n    $result: map-get($media-expressions, $expression);\r\n    $is-width: false;\r\n  } @else {\r\n    $result: to-number($value);\r\n  }\r\n\r\n  @if ($is-width) {\r\n    $unit: unit($result);\r\n    $interval: 0;\r\n    \r\n    @if (map-has-key($unit-intervals, $unit)) {\r\n      $interval: map-get($unit-intervals, $unit);\r\n    } @else {\r\n      @warn 'Unknown unit: #{$unit}';\r\n    } \r\n       \r\n    @if ($operator == '>') {\r\n      $element: '(min-width: #{$result + $interval})';\r\n    } @else if ($operator == '<') {\r\n      $element: '(max-width: #{$result - $interval})';\r\n    } @else if ($operator == '>=') {\r\n      $element: '(min-width: #{$result})';\r\n    } @else if ($operator == '<=') {\r\n      $element: '(max-width: #{$result})';\r\n    } @else {\r\n      @warn '#{$expression} is missing an operator.';\r\n    }\r\n  } @else {\r\n    $element: $result;\r\n  }\r\n\r\n  @return $element;\r\n}\r\n\r\n@function str-replace-first($search, $replace, $subject) {\r\n  $search-start: str-index($subject, $search);\r\n\r\n  @if $search-start == null {\r\n    @return $subject;\r\n  }\r\n\r\n  $result: str-slice($subject, 0, $search-start - 1);\r\n  $result: $result + $replace;\r\n  $result: $result + str-slice($subject, $search-start + str-length($search));\r\n\r\n  @return $result;\r\n}\r\n\r\n@function get-query-branches($expressions) {\r\n  $result: '';\r\n  $has-groups: false;\r\n\r\n  // Getting initial snapshot and looking for groups\r\n  @each $expression in $expressions {\r\n    @if (str-length($result) != 0) {\r\n      $result: $result + ' and ';\r\n    }\r\n\r\n    @if (type-of($expression) == 'string') {\r\n      $result: $result + $expression;\r\n    } @else if (type-of($expression) == 'list') {\r\n      $result: $result + nth($expression, 1);\r\n      $has-groups: true;\r\n    } @else {\r\n      @warn '#{$expression} is not a valid expression.';\r\n    }\r\n  }\r\n\r\n  // If we have groups, we have to create all possible combinations\r\n  @if $has-groups {\r\n    @each $expression in $expressions {\r\n      @if (type-of($expression) == 'list') {\r\n        $first: nth($expression, 1);\r\n\r\n        @each $member in $expression {\r\n          @if ($member != $first) {\r\n            @each $partial in $result {\r\n              $result: join($result, str-replace-first($first, $member, $partial));\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  @return $result;\r\n}\r\n\r\n@mixin media($conditions...) {\r\n  @for $i from 1 through length($conditions) {\r\n    $conditions: set-nth($conditions, $i, parse-expression(nth($conditions, $i)));\r\n  }\r\n\r\n  $branches: get-query-branches($conditions);\r\n  $query: '';\r\n\r\n  @each $branch in $branches {\r\n    @if (str-length($query) != 0) {\r\n      $query: $query + ', ';\r\n    }\r\n\r\n    $query: $query + $branch;\r\n  }\r\n\r\n  @media #{$query} {\r\n    @content;\r\n  }\r\n}"]}