{"version":3,"sources":["hooks/useFarmsWithBalance.ts","hooks/useAllEarnings.ts","views/Home/components/CardValue.tsx","views/Home/components/CardBusdValue.tsx","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/CakeWalletBalance.tsx","views/Home/components/FarmStakingCard.tsx","views/Home/components/CakeStats.tsx","views/Home/components/TotalValueLockedCard.tsx","views/Home/components/EarnAPYCard.tsx","views/Home/components/EarnAssetCard.tsx","views/Home/Home.tsx","hooks/useTokenBalance.ts","../node_modules/lodash/max.js","../node_modules/lodash/_baseExtremum.js","../node_modules/lodash/_baseGt.js"],"names":["useFarmsWithBalance","useState","farmsWithBalances","setFarmsWithBalances","account","useWeb3React","fastRefresh","useRefresh","useEffect","a","calls","farmsConfig","map","farm","address","getMasterChefAddress","name","params","pid","multicall","masterChefABI","rawResults","results","index","balance","BigNumber","fetchBalances","useAllEarnings","balances","setBalance","res","fetchAllBalances","CardValue","value","decimals","fontSize","lineHeight","prefix","bold","color","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","current","style","CardBusdValue","props","Block","styled","div","CakeHarvestBalance","TranslateString","useI18n","earningsSum","reduce","accum","earning","pow","toNumber","earningsBusd","multipliedBy","usePriceCakeBusd","CakeWalletBalance","cakeBalance","useTokenBalance","getCakeAddress","busdBalance","getBalanceNumber","StyledFarmStakingCard","Card","CardImage","img","Label","theme","colors","textSubtle","Actions","FarmedStakingCard","pendingTx","setPendingTx","balancesWithValue","filter","balanceType","onReward","useAllHarvest","farmWithBalance","harvestAllFarms","useCallback","size","mb","src","alt","width","height","id","disabled","length","onClick","count","UnlockButton","StyledCakeStats","Row","CakeStats","totalSupply","useTotalSupply","burnedBalance","useBurnedBalance","pianoPrice","circSupply","minus","cakeSupply","marketCap","times","StyledTotalValueLockedCard","TotalValueLockedCard","totalValue","useTotalValue","mediaQueries","lg","CardMidContent","Heading","attrs","EarnAPYCard","farmsLP","useFarms","prices","useGetApiPrices","cakePrice","highestApy","useMemo","apys","multiplier","lpTotalInQuoteToken","quoteTokenPriceUsd","quoteToken","symbol","toLowerCase","totalLiquidity","getFarmApy","poolWeight","maxApy","max","toLocaleString","maximumFractionDigits","animation","variant","justifyContent","exact","activeClassName","to","mt","primary","EarnAssetCard","activeNonCakePools","pools","pool","isFinished","earningToken","includes","latestPools","orderBy","slice","assets","join","Hero","Cards","BaseLayout","sm","CTACards","Home","Page","as","FarmStakingCard","slowRefresh","setTotalSupply","cakeContract","getCakeContract","methods","call","supply","fetchTotalSupply","tokenAddress","web3","useWeb3","contract","getBep20Contract","balanceOf","fetchBalance","baseExtremum","require","baseGt","identity","module","exports","array","isSymbol","iteratee","comparator","computed","result","other"],"mappings":"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","file":"static/js/4.f980d477.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport masterChefABI from 'config/abi/masterchef.json'\r\nimport { farmsConfig } from 'config/constants'\r\nimport { FarmConfig } from 'config/constants/types'\r\nimport useRefresh from './useRefresh'\r\n\r\nexport interface FarmWithBalance extends FarmConfig {\r\n  balance: BigNumber\r\n}\r\n\r\nconst useFarmsWithBalance = () => {\r\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\r\n  const { account } = useWeb3React()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalances = async () => {\r\n      const calls = farmsConfig.map((farm) => ({\r\n        address: getMasterChefAddress(),\r\n        name: 'pendingPiano',\r\n        params: [farm.pid, account],\r\n      }))\r\n\r\n      const rawResults = await multicall(masterChefABI, calls)\r\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\r\n\r\n      setFarmsWithBalances(results)\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalances()\r\n    }\r\n  }, [account, fastRefresh])\r\n\r\n  return farmsWithBalances\r\n}\r\n\r\nexport default useFarmsWithBalance\r\n","import { useEffect, useState } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport masterChefABI from 'config/abi/masterchef.json'\r\nimport { farmsConfig } from 'config/constants'\r\nimport useRefresh from './useRefresh'\r\n\r\nconst useAllEarnings = () => {\r\n  const [balances, setBalance] = useState([])\r\n  const { account } = useWeb3React()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchAllBalances = async () => {\r\n      const calls = farmsConfig.map((farm) => ({\r\n        address: getMasterChefAddress(),\r\n        name: 'pendingPiano',\r\n        params: [farm.pid, account],\r\n      }))\r\n\r\n      const res = await multicall(masterChefABI, calls)\r\n\r\n      setBalance(res)\r\n    }\r\n\r\n    if (account) {\r\n      fetchAllBalances()\r\n    }\r\n  }, [account, fastRefresh])\r\n\r\n  return balances\r\n}\r\n\r\nexport default useAllEarnings\r\n","import React, { useEffect, useRef } from 'react'\r\nimport { useCountUp } from 'react-countup'\r\nimport { Text } from '@mozartfinance/uikit'\r\n\r\nexport interface CardValueProps {\r\n  value: number\r\n  decimals?: number\r\n  fontSize?: string\r\n  lineHeight?: string\r\n  prefix?: string\r\n  bold?: boolean\r\n  color?: string\r\n}\r\n\r\nconst CardValue: React.FC<CardValueProps> = ({\r\n  value,\r\n  decimals,\r\n  fontSize = '40px',\r\n  lineHeight = '1',\r\n  prefix = '',\r\n  bold = true,\r\n  color = 'text',\r\n}) => {\r\n  const { countUp, update } = useCountUp({\r\n    start: 0,\r\n    end: value,\r\n    duration: 1,\r\n    separator: ',',\r\n    decimals:\r\n      // eslint-disable-next-line no-nested-ternary\r\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\r\n  })\r\n\r\n  const updateValue = useRef(update)\r\n\r\n  useEffect(() => {\r\n    updateValue.current(value)\r\n  }, [value, updateValue])\r\n\r\n  return (\r\n    <Text bold={bold} fontSize={fontSize} style={{ lineHeight }} color={color}>\r\n      {prefix}\r\n      {countUp}\r\n    </Text>\r\n  )\r\n}\r\n\r\nexport default CardValue\r\n","import React from 'react'\r\nimport CardValue, { CardValueProps } from './CardValue'\r\n\r\nconst CardBusdValue: React.FC<CardValueProps> = (props) => {\r\n  return (\r\n    <CardValue fontSize=\"14px\" lineHeight=\"1.1\" color=\"textSubtle\" prefix=\"~$\" bold={false} decimals={2} {...props} />\r\n  )\r\n}\r\n\r\nexport default CardBusdValue\r\n","import React from 'react'\r\nimport { Text } from '@mozartfinance/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport BigNumber from 'bignumber.js'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useAllEarnings from 'hooks/useAllEarnings'\r\nimport { usePriceCakeBusd } from 'state/hooks'\r\nimport styled from 'styled-components'\r\nimport CardValue from './CardValue'\r\nimport CardBusdValue from './CardBusdValue'\r\n\r\nconst Block = styled.div`\r\n  margin-bottom: 24px;\r\n}\r\n`\r\n\r\nconst CakeHarvestBalance = () => {\r\n  const TranslateString = useI18n()\r\n  const { account } = useWeb3React()\r\n  const allEarnings = useAllEarnings()\r\n  const earningsSum = allEarnings.reduce((accum, earning) => {\r\n    return accum + new BigNumber(earning).div(new BigNumber(10).pow(18)).toNumber()\r\n  }, 0)\r\n  const earningsBusd = new BigNumber(earningsSum).multipliedBy(usePriceCakeBusd()).toNumber()\r\n\r\n  if (!account) {\r\n    return (\r\n      <Text color=\"textDisabled\" style={{ lineHeight: '76px' }}>\r\n        {TranslateString(298, 'Locked')}\r\n      </Text>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Block>\r\n      <CardValue value={earningsSum} lineHeight=\"1.5\" />\r\n      <CardBusdValue value={earningsBusd} />\r\n    </Block>\r\n  )\r\n}\r\n\r\nexport default CakeHarvestBalance\r\n","import React from 'react'\r\nimport { Text } from '@mozartfinance/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport useTokenBalance from 'hooks/useTokenBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { usePriceCakeBusd } from 'state/hooks'\r\nimport { BigNumber } from 'bignumber.js'\r\nimport CardValue from './CardValue'\r\nimport CardBusdValue from './CardBusdValue'\r\n\r\nconst CakeWalletBalance = () => {\r\n  const TranslateString = useI18n()\r\n  const cakeBalance = useTokenBalance(getCakeAddress())\r\n  const busdBalance = new BigNumber(getBalanceNumber(cakeBalance)).multipliedBy(usePriceCakeBusd()).toNumber()\r\n  const { account } = useWeb3React()\r\n\r\n  if (!account) {\r\n    return (\r\n      <Text color=\"textDisabled\" style={{ lineHeight: '54px' }}>\r\n        {TranslateString(298, 'Locked')}\r\n      </Text>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <CardValue value={getBalanceNumber(cakeBalance)} decimals={4} fontSize=\"24px\" lineHeight=\"36px\" />\r\n      <CardBusdValue value={busdBalance} />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CakeWalletBalance\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Card, CardBody, Button } from '@mozartfinance/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useAllHarvest } from 'hooks/useHarvest'\r\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport CakeHarvestBalance from './CakeHarvestBalance'\r\nimport CakeWalletBalance from './CakeWalletBalance'\r\n\r\nconst StyledFarmStakingCard = styled(Card)`\r\n\r\n`\r\n\r\nconst Block = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst CardImage = styled.img`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Label = styled.div`\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  font-size: 14px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst FarmedStakingCard = () => {\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { account } = useWeb3React()\r\n  const TranslateString = useI18n()\r\n  const farmsWithBalance = useFarmsWithBalance()\r\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\r\n\r\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\r\n\r\n  const harvestAllFarms = useCallback(async () => {\r\n    setPendingTx(true)\r\n    try {\r\n      await onReward()\r\n    } catch (error) {\r\n      // TODO: find a way to handle when the user rejects transaction or it fails\r\n    } finally {\r\n      setPendingTx(false)\r\n    }\r\n  }, [onReward])\r\n\r\n  return (\r\n    <StyledFarmStakingCard>\r\n      <CardBody>\r\n        <Heading size=\"xl\" mb=\"24px\">\r\n          {TranslateString(542, 'Farms & Staking')}\r\n        </Heading>\r\n        <CardImage src=\"/images/piano.png\" alt=\"cake logo\" width={64} height={64} />\r\n        <Block>\r\n          <Label>{TranslateString(544, 'PIANO to Harvest')}:</Label>\r\n          <CakeHarvestBalance />\r\n        </Block>\r\n        <Block>\r\n          <Label>{TranslateString(546, 'PIANO in Wallet')}:</Label>\r\n          <CakeWalletBalance />\r\n        </Block>\r\n        <Actions>\r\n          {account ? (\r\n            <Button\r\n              id=\"harvest-all\"\r\n              disabled={balancesWithValue.length <= 0 || pendingTx}\r\n              onClick={harvestAllFarms}\r\n              width=\"100%\"\r\n            >\r\n              {pendingTx\r\n                ? TranslateString(548, 'Collecting PIANO')\r\n                : TranslateString(532, `Harvest all (${balancesWithValue.length})`, {\r\n                    count: balancesWithValue.length,\r\n                  })}\r\n            </Button>\r\n          ) : (\r\n            <UnlockButton width=\"100%\" />\r\n          )}\r\n        </Actions>\r\n      </CardBody>\r\n    </StyledFarmStakingCard>\r\n  )\r\n}\r\n\r\nexport default FarmedStakingCard\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js/bignumber'\r\nimport { Card, CardBody, Heading, Text } from '@mozartfinance/uikit'\r\nimport styled from 'styled-components'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport CardValue from './CardValue'\r\nimport { usePriceCakeBusd } from '../../../state/hooks'\r\n\r\nconst StyledCakeStats = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n`\r\n\r\nconst Row = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  font-size: 14px;\r\n  justify-content: space-between;\r\n  margin-bottom: 8px;\r\n`\r\n\r\nconst CakeStats = () => {\r\n  const TranslateString = useI18n()\r\n  const totalSupply = useTotalSupply()\r\n  const burnedBalance = useBurnedBalance(getCakeAddress())\r\n  const pianoPrice = usePriceCakeBusd();\r\n  const circSupply = totalSupply ? totalSupply.minus(burnedBalance) : new BigNumber(0);\r\n  const cakeSupply = getBalanceNumber(circSupply);\r\n  const marketCap = pianoPrice.times(circSupply);\r\n  const pianoPerBlock = 1;\r\n\r\n  return (\r\n      <StyledCakeStats>\r\n        <CardBody>\r\n          <Heading size=\"xl\" mb=\"24px\">\r\n            {TranslateString(534, 'PIANO Stats')}\r\n          </Heading>\r\n          <Row>\r\n            <Text fontSize=\"14px\">{TranslateString(10005, 'Market Cap')}</Text>\r\n            <CardValue fontSize=\"14px\" value={getBalanceNumber(marketCap)} decimals={0} prefix=\"$\" />\r\n          </Row>\r\n          <Row>\r\n            <Text fontSize=\"14px\">{TranslateString(536, 'Total Minted')}</Text>\r\n            {totalSupply && <CardValue fontSize=\"14px\" value={getBalanceNumber(totalSupply)} decimals={0} />}\r\n          </Row>\r\n          <Row>\r\n            <Text fontSize=\"14px\">{TranslateString(538, 'Total Burned')}</Text>\r\n            <CardValue fontSize=\"14px\" value={getBalanceNumber(burnedBalance)} decimals={0} />\r\n          </Row>\r\n          <Row>\r\n            <Text fontSize=\"14px\">{TranslateString(10004, 'Circulating Supply')}</Text>\r\n            {cakeSupply && <CardValue fontSize=\"14px\" value={cakeSupply} decimals={0} />}\r\n          </Row>\r\n          <Row>\r\n            <Text fontSize=\"14px\">{TranslateString(540, 'New PIANO/block')}</Text>\r\n            <Text bold fontSize=\"14px\">{pianoPerBlock}</Text>\r\n          </Row>\r\n        </CardBody>\r\n      </StyledCakeStats>\r\n  )\r\n}\r\n\r\nexport default CakeStats\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Card, CardBody, Heading, Skeleton, Text } from '@mozartfinance/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useTotalValue } from '../../../state/hooks'\r\nimport CardValue from \"./CardValue\";\r\n\r\nconst StyledTotalValueLockedCard = styled(Card)`\r\n  align-items: center;\r\n  display: flex;\r\n  flex: 1;\r\n`\r\n\r\nconst TotalValueLockedCard = () => {\r\n    const TranslateString = useI18n()\r\n    const totalValue = useTotalValue()\r\n\r\n    return (\r\n        <StyledTotalValueLockedCard>\r\n            <CardBody>\r\n                <Heading size=\"lg\" mb=\"24px\">\r\n                    {TranslateString(762, 'Total Value Locked (TVL)')}\r\n                </Heading>\r\n                <CardValue value={totalValue.toNumber()} prefix=\"$\" decimals={0} />\r\n                <Text color=\"textSubtle\">{TranslateString(764, 'Across all LPs and PIANO Pools')}</Text>\r\n            </CardBody>\r\n        </StyledTotalValueLockedCard>\r\n    )\r\n}\r\n\r\nexport default TotalValueLockedCard","import React, { useMemo } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon, Skeleton } from '@mozartfinance/uikit'\r\nimport max from 'lodash/max'\r\nimport { NavLink } from 'react-router-dom'\r\nimport useI18n from 'hooks/useI18n'\r\nimport BigNumber from 'bignumber.js'\r\nimport { getFarmApy } from 'utils/apy'\r\nimport { useFarms, usePriceCakeBusd, useGetApiPrices } from 'state/hooks'\r\n\r\nconst StyledFarmStakingCard = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  width: 100%;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    margin: 0;\r\n    max-width: none;\r\n  }\r\n`\r\nconst CardMidContent = styled(Heading).attrs({ size: 'xl' })`\r\n  line-height: 44px;\r\n`\r\nconst EarnAPYCard = () => {\r\n  const TranslateString = useI18n()\r\n  const farmsLP = useFarms()\r\n  const prices = useGetApiPrices()\r\n  const cakePrice = usePriceCakeBusd()\r\n\r\n  const highestApy = useMemo(() => {\r\n    const apys = farmsLP\r\n      // Filter inactive farms, because their theoretical APY is super high. In practice, it's 0.\r\n      .filter((farm) => farm.pid !== 0 && farm.multiplier !== '0X')\r\n      .map((farm) => {\r\n        if (farm.lpTotalInQuoteToken && prices) {\r\n          const quoteTokenPriceUsd = prices[farm.quoteToken.symbol.toLowerCase()]\r\n          const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(quoteTokenPriceUsd)\r\n          return getFarmApy(farm.poolWeight, cakePrice, totalLiquidity)\r\n        }\r\n        return null\r\n      })\r\n\r\n    const maxApy = max(apys)\r\n    return maxApy?.toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n  }, [cakePrice, farmsLP, prices])\r\n\r\n  return (\r\n    <StyledFarmStakingCard>\r\n      <CardBody>\r\n        <Heading color=\"contrast\" size=\"lg\">\r\n          Earn up to\r\n        </Heading>\r\n        <CardMidContent color=\"primary\">\r\n          {highestApy ? (\r\n            `${highestApy}% ${TranslateString(736, 'APR')}`\r\n          ) : (\r\n            <Skeleton animation=\"pulse\" variant=\"rect\" height=\"44px\" />\r\n          )}\r\n        </CardMidContent>\r\n        <Flex justifyContent=\"space-between\">\r\n          <Heading color=\"contrast\" size=\"lg\">\r\n            in Farms\r\n          </Heading>\r\n          <NavLink exact activeClassName=\"active\" to=\"/farms\" id=\"farm-apy-cta\">\r\n            <ArrowForwardIcon mt={30} color=\"primary\" />\r\n          </NavLink>\r\n        </Flex>\r\n      </CardBody>\r\n    </StyledFarmStakingCard>\r\n  )\r\n}\r\n\r\nexport default EarnAPYCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport orderBy from 'lodash/orderBy'\r\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon } from '@mozartfinance/uikit'\r\nimport { NavLink } from 'react-router-dom'\r\nimport pools from 'config/constants/pools'\r\nimport { Pool } from 'state/types'\r\n\r\nconst StyledFarmStakingCard = styled(Card)`\r\n  background: ${({ theme }) => theme.colors.primary};\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  width: 100%;\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    margin: 0;\r\n    max-width: none;\r\n  }\r\n`\r\nconst CardMidContent = styled(Heading).attrs({ size: 'xl' })`\r\n  line-height: 44px;\r\n`\r\nconst EarnAssetCard = () => {\r\n  const activeNonCakePools = pools.filter((pool) => !pool.isFinished && !pool.earningToken.symbol.includes('CAKE'))\r\n  const latestPools: Pool[] = orderBy(activeNonCakePools, ['sortOrder', 'pid'], ['desc', 'desc']).slice(0, 3)\r\n  // Always include CAKE\r\n  const assets = [...latestPools.map((pool) => pool.earningToken.symbol)].join(', ')\r\n\r\n  return (\r\n    <StyledFarmStakingCard>\r\n      <CardBody>\r\n        <Heading color=\"invertedContrast\" size=\"lg\">\r\n          Earn\r\n        </Heading>\r\n        <CardMidContent color=\"invertedContrast\">{assets}</CardMidContent>\r\n        <Flex justifyContent=\"space-between\">\r\n          <Heading color=\"invertedContrast\" size=\"lg\">\r\n            in Pools\r\n          </Heading>\r\n          <NavLink exact activeClassName=\"active\" to=\"/pools\" id=\"pool-cta\">\r\n            <ArrowForwardIcon mt={30} color=\"background\" />\r\n          </NavLink>\r\n        </Flex>\r\n      </CardBody>\r\n    </StyledFarmStakingCard>\r\n  )\r\n}\r\n\r\nexport default EarnAssetCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Text, BaseLayout } from '@mozartfinance/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport Page from 'components/layout/Page'\r\nimport FarmStakingCard from 'views/Home/components/FarmStakingCard'\r\nimport CakeStats from 'views/Home/components/CakeStats'\r\nimport TotalValueLockedCard from 'views/Home/components/TotalValueLockedCard'\r\nimport EarnAPYCard from 'views/Home/components/EarnAPYCard'\r\nimport EarnAssetCard from 'views/Home/components/EarnAssetCard'\r\nimport WinCard from 'views/Home/components/WinCard'\r\n\r\nconst Hero = styled.div`\r\n  align-items: center;\r\n  background-image: url('/images/mozart.gif');\r\n  background-repeat: no-repeat;\r\n  background-position: top center;\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  margin: auto;\r\n  margin-bottom: 32px;\r\n  padding-top: 116px;\r\n  text-align: center;\r\n  height: 60px;\r\n  padding-top: 0;\r\n  background-position: left center, right center;\r\n  background-size: contain;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    background-image: url('/images/mozart.gif');\r\n    background-position: left center, right center;\r\n    height: 165px;\r\n    padding-top: 0;\r\n    background-position: left center, right center;\r\n    background-size: contain;\r\n  }\r\n`\r\n\r\nconst Cards = styled(BaseLayout)`\r\n  align-items: stretch;\r\n  justify-content: stretch;\r\n  margin-bottom: 32px;\r\n\r\n  & > div {\r\n    grid-column: span 6;\r\n    width: 100%;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    & > div {\r\n      grid-column: span 8;\r\n    }\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    & > div {\r\n      grid-column: span 6;\r\n    }\r\n  }\r\n`\r\n\r\nconst CTACards = styled(BaseLayout)`\r\n  align-items: start;\r\n  margin-bottom: 32px;\r\n\r\n  & > div {\r\n    grid-column: span 6;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    & > div {\r\n      grid-column: span 8;\r\n    }\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    & > div {\r\n      grid-column: span 4;\r\n    }\r\n  }\r\n`\r\n\r\nconst Home: React.FC = () => {\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <Page>\r\n      <Hero>\r\n        <Heading as=\"h1\" size=\"xl\" mb=\"24px\" color=\"secondary\" fontSize=\"80px\">\r\n          {TranslateString(576, 'Mozart Finance')}\r\n        </Heading>\r\n        <Text>{TranslateString(578, 'Classiest DEFI project on #BSC.')}</Text>\r\n      </Hero>\r\n      <div>\r\n        <Cards>\r\n          <FarmStakingCard />\r\n        </Cards>\r\n        <CTACards>\r\n          <EarnAPYCard />\r\n          <EarnAssetCard />\r\n        </CTACards>\r\n        <Cards>\r\n          <CakeStats />\r\n          <TotalValueLockedCard />\r\n        </Cards>\r\n      </div>\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default Home\r\n","import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { getBep20Contract, getCakeContract } from 'utils/contractHelpers'\r\nimport useWeb3 from './useWeb3'\r\nimport useRefresh from './useRefresh'\r\n\r\nconst useTokenBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(new BigNumber(0))\r\n  const { account } = useWeb3React()\r\n  const web3 = useWeb3()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const contract = getBep20Contract(tokenAddress, web3)\r\n      const res = await contract.methods.balanceOf(account).call()\r\n      setBalance(new BigNumber(res))\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, tokenAddress, web3, fastRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport const useTotalSupply = () => {\r\n  const { slowRefresh } = useRefresh()\r\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\r\n\r\n  useEffect(() => {\r\n    async function fetchTotalSupply() {\r\n      const cakeContract = getCakeContract()\r\n      const supply = await cakeContract.methods.totalSupply().call()\r\n      setTotalSupply(new BigNumber(supply))\r\n    }\r\n\r\n    fetchTotalSupply()\r\n  }, [slowRefresh])\r\n\r\n  return totalSupply\r\n}\r\n\r\nexport const useBurnedBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(new BigNumber(0))\r\n  const { slowRefresh } = useRefresh()\r\n  const web3 = useWeb3()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const contract = getBep20Contract(tokenAddress, web3)\r\n      const res = await contract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\r\n      setBalance(new BigNumber(res))\r\n    }\r\n\r\n    fetchBalance()\r\n  }, [web3, tokenAddress, slowRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport default useTokenBalance\r\n","var baseExtremum = require('./_baseExtremum'),\n    baseGt = require('./_baseGt'),\n    identity = require('./identity');\n\n/**\n * Computes the maximum value of `array`. If `array` is empty or falsey,\n * `undefined` is returned.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Math\n * @param {Array} array The array to iterate over.\n * @returns {*} Returns the maximum value.\n * @example\n *\n * _.max([4, 2, 8, 6]);\n * // => 8\n *\n * _.max([]);\n * // => undefined\n */\nfunction max(array) {\n  return (array && array.length)\n    ? baseExtremum(array, identity, baseGt)\n    : undefined;\n}\n\nmodule.exports = max;\n","var isSymbol = require('./isSymbol');\n\n/**\n * The base implementation of methods like `_.max` and `_.min` which accepts a\n * `comparator` to determine the extremum value.\n *\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The iteratee invoked per iteration.\n * @param {Function} comparator The comparator used to compare values.\n * @returns {*} Returns the extremum value.\n */\nfunction baseExtremum(array, iteratee, comparator) {\n  var index = -1,\n      length = array.length;\n\n  while (++index < length) {\n    var value = array[index],\n        current = iteratee(value);\n\n    if (current != null && (computed === undefined\n          ? (current === current && !isSymbol(current))\n          : comparator(current, computed)\n        )) {\n      var computed = current,\n          result = value;\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseExtremum;\n","/**\n * The base implementation of `_.gt` which doesn't coerce arguments.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if `value` is greater than `other`,\n *  else `false`.\n */\nfunction baseGt(value, other) {\n  return value > other;\n}\n\nmodule.exports = baseGt;\n"],"sourceRoot":""}